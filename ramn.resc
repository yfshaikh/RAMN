# RAMN Firmware Renode Script
# Renode provides better STM32 peripheral emulation than QEMU
# Install: brew install --cask renode
# Run: renode ramn.resc

# Create machine
mach create "RAMN_ECU"

# Load STM32L5 platform
# Note: You may need to create custom .repl file for exact STM32L552 match
# This uses a generic Cortex-M configuration
machine LoadPlatformDescription @platforms/cpus/cortex-m.repl

# Configure memory layout to match STM32L552
machine PyDevFromString "
sram = self.machine.GetSystemBus(self).ReadWord(0x20000000)
flash = self.machine.GetSystemBus(self).ReadWord(0x08000000)
"

# Load firmware binary
# Change this path to the ECU you want to test
sysbus LoadBinary @scripts/firmware/ECUA.bin 0x08000000

# Set PC (Program Counter) to reset vector
# The STM32 reset vector is at 0x08000004
cpu PC 0x08000004

# Optional: Enable logging
logLevel -1 cpu

# Optional: Create UART for debugging output
# emulation CreateUART "uart0"
# connector Connect sysbus.usart1 uart0

# Show info
echo "=========================================="
echo "RAMN Firmware Loaded in Renode"
echo "=========================================="
echo "Firmware: scripts/firmware/ECUA.bin"
echo "Platform: Cortex-M (STM32L5-like)"
echo ""
echo "Commands:"
echo "  start         - Start emulation"
echo "  pause         - Pause emulation"
echo "  quit          - Exit Renode"
echo "  help          - Show all commands"
echo ""
echo "Debugging:"
echo "  cpu PC        - Show program counter"
echo "  sysbus ReadDoubleWord 0x20000000  - Read RAM"
echo "  sysbus ReadDoubleWord 0x08000000  - Read Flash"
echo "=========================================="
echo ""
echo "Type 'start' to begin execution..."

